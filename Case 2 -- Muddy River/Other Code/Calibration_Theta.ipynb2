{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy \n",
    "from scipy import stats\n",
    "from scipy.stats import norm,uniform\n",
    "import matplotlib.pyplot as plt\n",
    "import pdb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Power = np.array([36.63, 38.26, 39.39, 40.56, 43.23, 56.54, 72.70, 84.19, 76.06, 61.32, 50.75, 46.90])\n",
    "Gas = np.array([2.905, 2.81, 2.76, 2.73, 3.20, 3.88, 4.45, 4.8, 4.56, 4.13, 3.68, 3.49])\n",
    "dt = 1/48\n",
    "month_list = [i for i in range(1,13)] \n",
    "PowerTheta = np.zeros(12)\n",
    "GasTheta = np.zeros(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func1(N,    #N is the number of periods\n",
    "    PowerPrices = Power, \n",
    "    GasPrices = Gas,\n",
    "    thetap1= PowerTheta,\n",
    "    thetag1 = GasTheta,\n",
    "    rho = 0.3,   \n",
    "    n = 100 ,\n",
    "    random_seed = 100): #number of paths\n",
    "    \n",
    "    #params\n",
    "    N_month = N\n",
    "    N *= 4\n",
    "    alphaCC,alphaJC,alphaG = 7, 20, 3\n",
    "    m = 75\n",
    "    p = 0.083 # lambda*dt, weekly probability\n",
    "    CC0,JC0, G0 = 35, 0, 3\n",
    "    spike_thres = 75\n",
    "    sigmaG = 7.22/np.sqrt(dt)/100\n",
    "    \n",
    "    #V summer and winter\n",
    "    v_summer = 28.87/np.sqrt(dt)/100\n",
    "    v_winter = 10.83/np.sqrt(dt)/100\n",
    "    V = np.zeros((N+1,n))\n",
    "    \n",
    "    W = norm.rvs(size = (N+1,n))*np.sqrt(dt)\n",
    "    Wtilde = norm.rvs(size = (N+1,n))*np.sqrt(dt)\n",
    "    B = rho*W + np.sqrt(1-rho**2)*Wtilde\n",
    "    \n",
    "    CC = np.zeros((N+1,n)) \n",
    "    CC[0,:] = CC0\n",
    "    JC = np.zeros((N+1,n))\n",
    "    JC[0,:] = JC0\n",
    "    G = np.zeros((N+1,n)) \n",
    "    G[0,:] = G0\n",
    "    PC = np.zeros((N+1,n))\n",
    "    PC[0,:] = CC[0,:]\n",
    "    # \n",
    "    Power_MSE,Gas_MSE = 0, 0\n",
    "    Power_Price_Fit, Gas_Price_Fit, CC_Price_Fit, JC_Price_Fit = list(), list(), list(), list()\n",
    "\n",
    "    \n",
    "    for i in range(1, N + 1):\n",
    "        month1 = month_list[int(np.ceil(i/4)) - 1]    \n",
    "        monthIndicator = (month1 > 4)&(month1 < 9)\n",
    "\n",
    "        V[i,:] = monthIndicator*v_summer + (1 - monthIndicator)*v_winter\n",
    "        CC[i,:] = alphaCC*(thetap1[month1-1] - CC[i-1,:])*dt + V[i,:]*CC[i-1,:]*W[i,:] + CC[i-1,:]\n",
    "        JC[i,:] = alphaJC*( 0 - JC[i-1,:])*dt + m*(uniform.rvs() < p)+JC[i-1,:]\n",
    "        #Power Price\n",
    "        PC[i,:] = CC[i,:] + JC[i,:]*(PC[i-1,:] > spike_thres)\n",
    "        #Gas Price\n",
    "        G[i,:]  = alphaG*(thetag1[month1-1] - G[i-1,:])*dt + sigmaG * G[i-1,:] * B[i,:] + G[i-1,:]\n",
    "\n",
    "        Power_MSE += np.abs(np.mean(PC[i,:]) - PowerPrices[month1 - 1])\n",
    "        Gas_MSE += np.abs(np.mean(G[i,:]) - GasPrices[month1 - 1])\n",
    "        \n",
    "        if i%4 == 0:\n",
    "            Power_Price_Fit.append(np.mean(PC[i,:]))\n",
    "            Gas_Price_Fit.append(np.mean(G[i,:]))\n",
    "            CC_Price_Fit.append(np.mean(CC[i,:]))\n",
    "            JC_Price_Fit.append(np.mean(JC[i,:]))\n",
    "            \n",
    "    return Power_MSE, Gas_MSE,(Power_Price_Fit,Gas_Price_Fit,CC_Price_Fit,JC_Price_Fit)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cali(MSE_fun, N, thetap_l = 0, thetap_r = 300, thetap_d = 0.5, thetag_l = 0, thetag_r = 10, thetag_d = 0.05):\n",
    "    MSE_p, MSE_g = list(), list()\n",
    "    thetap_list = [thetap_l + thetap_d * x for x in range(int((thetap_r -thetap_l)/thetap_d)+1)]\n",
    "    thetag_list = [thetag_l + thetag_d * x for x in range(int((thetag_r - thetag_l)/thetag_d)+1)]\n",
    "    for i1 in thetap_list:\n",
    "        PowerTheta[N - 1] = i1\n",
    "        MSE_p.append(MSE_fun(N, Power,Gas,thetap1= PowerTheta, thetag1 = GasTheta,rho = 0.3,n = 100)[0])\n",
    "        #print(\"MSE_P:\", MSE_p)\n",
    "        #print(PowerTheta)\n",
    "    for i2 in thetag_list:\n",
    "        GasTheta[N - 1] = i2\n",
    "        MSE_g.append(MSE_fun(N, Power,Gas,thetap1= PowerTheta,thetag1 = GasTheta,rho = 0.3,n = 100)[1])\n",
    "    #print('MSE\\n',MSE_p)\n",
    "    #print('index\\n',np.argmin(MSE_p))\n",
    "    #print('thetap\\n',thetap_list[np.argmin(MSE_p)])\n",
    "    return thetap_list[np.argmin(MSE_p)], thetag_list[np.argmin(MSE_g)], np.min(MSE_p), np.min(MSE_g)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is the 1 for loop\n",
      "[40.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n",
      "[2.55 0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  ]\n",
      "1.114855970944923\n",
      "0.11578865205000888\n",
      "This is the 2 for loop\n",
      "[40.  41.5  0.   0.   0.   0.   0.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  0.   0.   0.   0.   0.   0.   0.   0.   0.   0.  ]\n",
      "2.8746539424393944\n",
      "0.2594789793919041\n",
      "This is the 3 for loop\n",
      "[40.  41.5 41.   0.   0.   0.   0.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 0.   0.   0.   0.   0.   0.   0.   0.   0.  ]\n",
      "5.776167317584573\n",
      "0.2273108124487404\n",
      "This is the 4 for loop\n",
      "[40.  41.5 41.  40.5  0.   0.   0.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 0.   0.   0.   0.   0.   0.   0.   0.  ]\n",
      "7.888740182802728\n",
      "0.36135799512548594\n",
      "This is the 5 for loop\n",
      "[40.  41.5 41.  40.5 37.5  0.   0.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 0.   0.   0.   0.   0.   0.   0.  ]\n",
      "8.679551404151617\n",
      "1.2257908916223736\n",
      "This is the 6 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.   0.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  0.   0.   0.   0.   0.   0.  ]\n",
      "20.467642031038224\n",
      "2.026889896391566\n",
      "This is the 7 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.   0.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 0.   0.   0.   0.   0.  ]\n",
      "44.943693195168386\n",
      "2.922026284963401\n",
      "This is the 8 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.  95.   0.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 7.3  0.   0.   0.   0.  ]\n",
      "73.02834793076194\n",
      "3.249856487892605\n",
      "This is the 9 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.  95.  72.   0.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 7.3  2.55 0.   0.   0.  ]\n",
      "119.3255096596854\n",
      "4.190990816153679\n",
      "This is the 10 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.  95.  72.  44.   0.   0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 7.3  2.55 2.55 0.   0.  ]\n",
      "122.40156148721621\n",
      "5.1305531221248755\n",
      "This is the 11 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.  95.  72.  44.  35.5  0. ]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 7.3  2.55 2.55 2.4  0.  ]\n",
      "114.13170191476105\n",
      "5.195470724045113\n",
      "This is the 12 for loop\n",
      "[40.  41.5 41.  40.5 37.5 75.  55.  95.  72.  44.  35.5 28.5]\n",
      "[2.55 2.8  2.65 2.15 5.65 5.2  6.25 7.3  2.55 2.55 2.4  2.05]\n",
      "114.66756471335358\n",
      "5.746648603549148\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(10)\n",
    "PowerTheta = np.zeros(12)\n",
    "GasTheta = np.zeros(12)\n",
    "for n in range(1, 13):\n",
    "    print(\"This is the\", n ,\"for loop\")\n",
    "    PowerTheta[n-1],GasTheta[n-1],MSE_P,MSE_G  = cali(func1, N = n)\n",
    "    print(PowerTheta)\n",
    "    print(GasTheta)\n",
    "    print(MSE_P)\n",
    "    print(MSE_G)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Power Price Fit:  [38.4475660936783, 39.849420127112964, 39.726990246605496, 40.79451390266971, 43.88114927738974, 57.74257598149666, 57.44926754807445, 92.62711913552891, 77.01180811420073, 65.85622388850275, 48.811100981837214, 38.77448937268801] \n",
      "\n",
      "CC Price Fit:  [38.4475660936783, 39.849420127112964, 39.726990246605496, 40.79451390266971, 40.88114927738974, 56.26626666436701, 57.25821659168676, 75.51921165577039, 74.77693877042154, 59.6661144041447, 48.72150768472143, 38.77241458964042] \n",
      "\n",
      "JC_Price_Fit:  [0.0, 0.0, 0.0, 0.0, 75.0, 8.684172453703708, 1.0055313494088833, 43.866429435278306, 5.0792485085890835, 15.475273710895182, 1.7918659423157484, 0.2074783047598433] \n",
      "\n",
      "real Power Price:  [36.63 38.26 39.39 40.56 43.23 56.54 72.7  84.19 76.06 61.32 50.75 46.9 ] \n",
      "\n",
      "Gas_Price_Fit:  [2.881964879411931, 2.8819157508489086, 2.8225136802849646, 2.6433583487290644, 3.341107131259895, 3.727742026011065, 4.220307443426418, 4.9903326907728305, 4.537248664333045, 4.0610763553527525, 3.666744824575937, 3.2680711094989388] \n",
      "\n",
      "Gas Prices:  [2.905 2.81  2.76  2.73  3.2   3.88  4.45  4.8   4.56  4.13  3.68  3.49 ] \n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result = func1(12, Power,Gas,thetap1= PowerTheta, thetag1 = GasTheta,rho = 0.3,n = 100)[2]\n",
    "\n",
    "Power_Price_Fit,Gas_Price_Fit,CC_Price_Fit,JC_Price_Fit = result\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.plot(Power_Price_Fit,label = 'Fitted Power Price')\n",
    "plt.plot(Power,label = 'Real Power Price')\n",
    "plt.plot(CC_Price_Fit,label = 'CC Price',linestyle = \"dotted\")\n",
    "plt.plot(JC_Price_Fit,label = 'JC Price',linestyle = \"dotted\")\n",
    "plt.title('Power Price Plot')\n",
    "plt.legend()\n",
    "\n",
    "fig = plt.figure()\n",
    "plt.plot(Gas_Price_Fit,label = 'Fitted Gas Price')\n",
    "plt.plot(Gas,label = 'Real Gas Prices')\n",
    "plt.title('Gas Price Plot')\n",
    "plt.legend()\n",
    "\n",
    "print('Power Price Fit: ',Power_Price_Fit,'\\n')\n",
    "print('CC Price Fit: ',CC_Price_Fit,'\\n')\n",
    "print('JC_Price_Fit: ',JC_Price_Fit,'\\n')\n",
    "print('real Power Price: ', Power,'\\n')\n",
    "print('Gas_Price_Fit: ',Gas_Price_Fit,'\\n')\n",
    "print('Gas Prices: ',Gas,'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12,)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P_theta = np.array([40, 39.5 ,42. , 43. , 40. , 85.5 ,85. , 96.,  65. , 33.5 ,32.5 ,54.])\n",
    "G_theta = np.array([2.55 ,2.8 , 2.65 , 2.15, 5.65 , 5.2  , 6.25 ,7.3 , 2.55, 2.55 ,2.4 , 2.05])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
